# bot/handlers/transfer_stars.py

from aiogram import types, Router
from aiogram.filters import Command, CommandObject
from datetime import datetime

from utils.logger import log
from db.models import User, Transaction

router = Router()

# ‚ö†Ô∏è –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
# –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –º–æ–∂–Ω–æ —É @userinfobot
OWNER_ID = 1487757625  # <-- –ò–ó–ú–ï–ù–ò–¢–ï –≠–¢–û!


@router.message(Command(commands=["transfer"]))
async def transfer_stars_command(message: types.Message, command: CommandObject, db_session):
    """
    Transfer stars from bot to user.
    Admin only command.
    
    Usage: /transfer <user_id> <amount>
    Example: /transfer 123456789 100
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        with db_session as db:
            admin_user = db.query(User).filter(
                User.user_id == message.from_user.id
            ).first()
            
            if not admin_user or admin_user.status != "admin":
                await message.reply("‚ùå You don't have permission to use this command.")
                return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not command.args:
            await message.reply(
                "‚ùå Please specify user ID and amount.\n"
                "Usage: `/transfer <user_id> <amount>`\n"
                "Example: `/transfer 123456789 100`",
                parse_mode="Markdown"
            )
            return
        
        args = command.args.split()
        if len(args) != 2:
            await message.reply(
                "‚ùå Invalid format.\n"
                "Usage: `/transfer <user_id> <amount>`",
                parse_mode="Markdown"
            )
            return
        
        try:
            target_user_id = int(args[0])
            amount = int(args[1])
            
            if amount <= 0:
                await message.reply("‚ùå Amount must be positive.")
                return
                
        except ValueError:
            await message.reply("‚ùå User ID and amount must be numbers.")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        with db_session as db:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = db.query(User).filter(
                User.user_id == target_user_id
            ).first()
            
            if not target_user:
                await message.reply(f"‚ùå User with ID {target_user_id} not found.")
                return
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_balance = target_user.balance
            target_user.balance += amount
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                user_id=target_user_id,
                amount=amount,
                telegram_payment_charge_id=f"admin_transfer_{message.from_user.id}_{datetime.now().timestamp()}",
                status="completed",
                time=datetime.now().isoformat(),
                payload=f"admin_transfer_from_{message.from_user.id}"
            )
            db.add(transaction)
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.reply(
                f"‚úÖ Successfully transferred {amount}‚≠ê to user {target_user.username}\n"
                f"‚Ä¢ Old balance: {old_balance}‚≠ê\n"
                f"‚Ä¢ New balance: {target_user.balance}‚≠ê\n"
                f"‚Ä¢ Transaction ID: {transaction.telegram_payment_charge_id}",
                parse_mode="Markdown"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–≤–µ–∑–¥
            try:
                await message.bot.send_message(
                    target_user_id,
                    f"üéÅ You received {amount}‚≠ê from administrator!\n"
                    f"Your new balance: {target_user.balance}‚≠ê"
                )
            except Exception as e:
                log.warning(f"Could not notify user {target_user_id}: {e}")
                await message.reply(
                    "‚ö†Ô∏è Transfer successful, but could not notify the user."
                )
                
    except Exception as e:
        log.error(f"Error in transfer_stars_command: {e}")
        await message.reply(f"‚ùå Error: {str(e)}")


@router.message(Command(commands=["give_admin"]))
async def give_admin_command(message: types.Message, command: CommandObject, db_session):
    """
    Give admin rights to a user.
    Only owner can use this command.
    
    Usage: /give_admin <user_id>
    """
    if message.from_user.id != OWNER_ID:
        await message.reply("‚ùå Only bot owner can use this command.")
        return
    
    if not command.args:
        await message.reply(
            "‚ùå Please specify user ID.\n"
            "Usage: `/give_admin <user_id>`",
            parse_mode="Markdown"
        )
        return
    
    try:
        target_user_id = int(command.args)
    except ValueError:
        await message.reply("‚ùå User ID must be a number.")
        return
    
    with db_session as db:
        user = db.query(User).filter(User.user_id == target_user_id).first()
        
        if not user:
            await message.reply(f"‚ùå User with ID {target_user_id} not found.")
            return
        
        if user.status == "admin":
            await message.reply(f"‚ÑπÔ∏è User {user.username} is already an admin.")
            return
        
        user.status = "admin"
        db.commit()
        
        await message.reply(
            f"‚úÖ Successfully granted admin rights to {user.username}!"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                target_user_id,
                "üéâ You have been granted administrator privileges!"
            )
        except:
            pass


@router.message(Command(commands=["admins"]))
async def list_admins_command(message: types.Message, db_session):
    """
    List all administrators.
    Admin only command.
    """
    with db_session as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        user = db.query(User).filter(
            User.user_id == message.from_user.id
        ).first()
        
        if not user or user.status != "admin":
            await message.reply("‚ùå You don't have permission to use this command.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins = db.query(User).filter(User.status == "admin").all()
        
        if not admins:
            await message.reply("üìã No administrators found.")
            return
        
        admin_list = "üë• **Administrators:**\n\n"
        for admin in admins:
            admin_list += f"‚Ä¢ {admin.username} (ID: {admin.user_id})\n"
        
        await message.reply(admin_list, parse_mode="Markdown")