# bot/handlers/refund.py
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

from aiogram import types, Router
from aiogram.filters import Command, CommandObject
from datetime import datetime

from utils.logger import log
from db.models import User, Transaction
from aiogram.methods import RefundStarPayment

router = Router()


@router.message(Command(commands=["refund"]))
async def refund_stars_command(message: types.Message, command: CommandObject, db_session):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /refund <transaction_id>
    –ü—Ä–∏–º–µ—Ä: /refund 123
    
    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    2. –ù–∞—Ö–æ–¥–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID
    3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    5. –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        with db_session as db:
            admin_user = db.query(User).filter(
                User.user_id == message.from_user.id
            ).first()
            
            if not admin_user or admin_user.status != "admin":
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if not command.args:
            await message.reply(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /refund <transaction_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /refund 123"
            )
            return
        
        try:
            transaction_id = int(command.args.strip())
        except ValueError:
            await message.reply("‚ùå ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç
        with db_session as db:
            # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = db.query(Transaction).filter(
                Transaction.id == transaction_id
            ).first()
            
            if not transaction:
                await message.reply(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID {transaction_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if transaction.status == "refunded":
                await message.reply(
                    f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id} —É–∂–µ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Ä–∞–Ω–µ–µ."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            if transaction.payload and "refund" in transaction.payload.lower():
                await message.reply(
                    f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id} —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –≤–æ–∑–≤—Ä–∞—Ç–∞. "
                    "–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞."
                )
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(
                User.user_id == transaction.user_id
            ).first()
            
            if not user:
                await message.reply(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {transaction.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            refund_amount = abs(transaction.amount)  # –ë–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
            old_balance = user.balance
            old_transaction_status = transaction.status

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç: –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.balance += refund_amount
            transaction.status = "refunded"

            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ Telegram API
            try:
                await message.bot(RefundStarPayment(
                    user_id=user.user_id,
                    telegram_payment_charge_id=transaction.telegram_payment_charge_id
                ))
                log.info(f"Refund request sent to Telegram for transaction {transaction_id}")
            except Exception as e:
                log.error(f"Failed to send refund request to Telegram for transaction {transaction_id}: {e}")
                await message.reply("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å Telegram –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å —É–∂–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            # –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∑–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            refund_transaction = Transaction(
                user_id=user.user_id,
                amount=refund_amount,
                telegram_payment_charge_id=f"refund_{transaction_id}_{datetime.now().timestamp()}",
                status="completed",
                time=datetime.now().isoformat(),
                payload=f"refund_for_transaction_{transaction_id}_by_admin_{admin_user.user_id}"
            )
            db.add(refund_transaction)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = (
                f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"üìã **–î–µ—Ç–∞–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:**\n"
                f"‚Ä¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: #{transaction_id}\n"
                f"‚Ä¢ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: +{refund_amount}‚≠ê\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user.username} (ID: {user.user_id})\n"
                f"‚Ä¢ –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {old_balance}‚≠ê\n"
                f"‚Ä¢ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}‚≠ê\n"
                f"‚Ä¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: #{refund_transaction.id}\n"
                f"‚Ä¢ –í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            await message.reply(report, parse_mode="Markdown")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
            try:
                user_notification = (
                    f"üí∞ –í–∞–º –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                    f"‚Ä¢ –°—É–º–º–∞: +{refund_amount}‚≠ê\n"
                    f"‚Ä¢ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}‚≠ê\n"
                    f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: –≤–æ–∑–≤—Ä–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #{transaction_id}\n"
                    f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_user.username}"
                )
                await message.bot.send_message(
                    user.user_id,
                    user_notification
                )
                log.info(f"User {user.user_id} notified about refund")
            except Exception as e:
                log.warning(f"Could not notify user {user.user_id} about refund: {e}")
                await message.reply(
                    "‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                )
        
    except Exception as e:
        log.error(f"Error in refund_stars_command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")


@router.message(Command(commands=["transactions"]))
async def list_transactions_command(message: types.Message, command: CommandObject, db_session):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    - /transactions - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    - /transactions <user_id> - –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    try:
        with db_session as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            requesting_user = db.query(User).filter(
                User.user_id == message.from_user.id
            ).first()
            
            is_admin = requesting_user and requesting_user.status == "admin"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            if command.args and is_admin:
                try:
                    target_user_id = int(command.args.strip())
                except ValueError:
                    await message.reply("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                    return
            else:
                target_user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = db.query(User).filter(
                User.user_id == target_user_id
            ).first()
            
            if not target_user:
                await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = db.query(Transaction).filter(
                Transaction.user_id == target_user_id
            ).order_by(Transaction.id.desc()).limit(20).all()
            
            if not transactions:
                await message.reply(
                    f"üìã –£ {'–≤–∞—Å' if target_user_id == message.from_user.id else f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.username}'} "
                    f"–ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = (
                f"üìä **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {'–≤–∞—à–∏' if target_user_id == message.from_user.id else f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.username}'}** "
                f"(–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(transactions)}):\n\n"
            )
            
            for trans in transactions:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if trans.amount > 0:
                    trans_type = "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
                    amount_str = f"+{trans.amount}‚≠ê"
                else:
                    trans_type = "‚ûñ –ü–æ–∫—É–ø–∫–∞"
                    amount_str = f"{trans.amount}‚≠ê"
                
                if trans.payload and "refund" in trans.payload:
                    trans_type = "üí∞ –í–æ–∑–≤—Ä–∞—Ç"
                    amount_str = f"+{abs(trans.amount)}‚≠ê"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                try:
                    trans_time = datetime.fromisoformat(trans.time).strftime("%d.%m.%Y %H:%M")
                except:
                    trans_time = trans.time or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                report += (
                    f"**#{trans.id}** {trans_type}\n"
                    f"‚Ä¢ –°—É–º–º–∞: {amount_str}\n"
                    f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' if trans.status == 'completed' else 'üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞'}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: {trans_time}\n"
                )
                
                # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if is_admin:
                    report += f"‚Ä¢ ID –ø–ª–∞—Ç–µ–∂–∞: `{trans.telegram_payment_charge_id}`\n"
                    if trans.payload:
                        report += f"‚Ä¢ Payload: `{trans.payload[:50]}{'...' if len(trans.payload) > 50 else ''}`\n"
                
                report += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ
            report += f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {target_user.balance}‚≠ê"
            
            await message.reply(report, parse_mode="Markdown")
            
    except Exception as e:
        log.error(f"Error in list_transactions_command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {str(e)}")


@router.message(Command(commands=["find_transaction"]))
async def find_transaction_command(message: types.Message, command: CommandObject, db_session):
    """
    –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find_transaction <payment_charge_id –∏–ª–∏ —Å—É–º–º–∞>
    """
    if not command.args:
        await message.reply(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: /find_transaction 500"
        )
        return
    
    with db_session as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        admin_user = db.query(User).filter(
            User.user_id == message.from_user.id
        ).first()
        
        if not admin_user or admin_user.status != "admin":
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        search_term = command.args.strip()
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ charge_id
        transactions = db.query(Transaction).filter(
            Transaction.telegram_payment_charge_id.contains(search_term)
        ).all()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ —Å—É–º–º–µ
        if not transactions:
            try:
                amount = int(search_term)
                transactions = db.query(Transaction).filter(
                    Transaction.amount == amount
                ).order_by(Transaction.id.desc()).limit(10).all()
            except ValueError:
                pass
        
        if not transactions:
            await message.reply(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        report = f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}\n\n"
        
        for trans in transactions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            user = db.query(User).filter(User.user_id == trans.user_id).first()
            username = user.username if user else "Unknown"
            
            report += (
                f"**#{trans.id}**\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {trans.user_id})\n"
                f"‚Ä¢ –°—É–º–º–∞: {trans.amount}‚≠ê\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {trans.status}\n"
                f"‚Ä¢ ID –ø–ª–∞—Ç–µ–∂–∞: `{trans.telegram_payment_charge_id}`\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {trans.time}\n\n"
            )
        
        if len(transactions) > 10:
            report += f"... –∏ –µ—â–µ {len(transactions) - 10} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
        
        await message.reply(report, parse_mode="Markdown")